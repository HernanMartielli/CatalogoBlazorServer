@page "/catalogoAplicaciones"
@using CatalogoBlazorServer.Models
@using CatalogoBlazorServer.Data.Repositorio
@inject IRepositorio Repositorio;


    <table class="table table-sm mt-1">
        <thead class="table-dark">
            <tr>
                <th>SEGMENTO</th>
                <th>MARCA</th>
                <th>MODELO</th>
                <th>VERSION</th>
            </tr>
        </thead>
        <tbody>
            <tr>

                <td>
                    <EditForm Model="@Segmentos">
                        <InputSelect Class="form-group btn-primary dropdown-toggle"
                                        Value="@idSegmento"
                                        ValueChanged="@((string  idSegmento) => SegmentoHasChanged(idSegmento) )"
                                        ValueExpression="@(() => idSegmento)">
                            <option value="0">Seleccione el Segmento...</option>
                            @foreach (var segmento in Segmentos)
                            {
                                <option value="@segmento.IdSegmento">@segmento.Segmento</option>
                            }
                        </InputSelect>
                    </EditForm>
                </td>
                <td>

                    <EditForm Model="@MarcasVehiculos">
                        <InputSelectNumber Class="form-group" id="imputMarcas"
                                            Value="@idMarca"
                                            ValueChanged="@((int idMarca) => MarcaHasChanged(idMarca) )"
                                            ValueExpression="@(() => idMarca)">
                            <option value=0>Seleccione la marca...</option>
                            @foreach (var marcaVehiculo in MarcasVehiculos)
                            {
                                <option value="@marcaVehiculo.IdMarca">@marcaVehiculo.Marca</option>
                            }
                        </InputSelectNumber>
                    </EditForm>

                </td>


                <td>
                    <EditForm Model="@ModelosVehiculos">
                        <InputSelectNumber Class="form-group"
                                            Value="@idModelo"
                                            ValueChanged="@((int idModelo) => ModeloHasChanged(idModelo) )"
                                            ValueExpression="@(() => idModelo)">

                            <option value=0>Seleccione el modelo...</option>
                            @foreach (var modeloVehiculo in ModelosVehiculos)
                            {
                                <option value="@modeloVehiculo.IdModelo">@modeloVehiculo.Modelo</option>
                            }
                        </InputSelectNumber>
                    </EditForm>
                </td>


                <td>
                    <EditForm Model="@VersionesModelo">
                        <InputSelectNumber Class="form-group"
                                            Value="@idVehiculo"
                                            ValueChanged="@((int idVehiculo) => VersionHasChanged(idVehiculo) )"
                                            ValueExpression="@(() => idVehiculo)">

                            <option value=0>Seleccione la version...</option>
                            @foreach (var versionModelo in VersionesModelo)
                            {
                                <option value="@versionModelo.IdVehiculo">@versionModelo.Version</option>
                            }
                        </InputSelectNumber>
                    </EditForm>
                </td>

                <td>
                    <button type="button" class="btn btn-dark " @onclick="TraerAplicaciones">Buscar</button>
                </td>

            </tr>
        </tbody>

    </table>

    @if (MarcasVehiculos.Count == 0)
    {
        <p><em>Cargando datos para seleccion...</em></p>
    }
    else
    {
        if (AplicacionesMostrar.Count == 0)
        {
        <p><em>A la espera de su busqueda...</em></p>
        }
        else
        {
            if (AplicacionesFiltradas.Count > 0)
                {
                    <div  style="display: flex; align-items: baseline;">
                        <p>Filtrado por <span style="background-color: lightgreen ">@posicionGrupoElejida.ToUpper()</span></p>
                        <button type="button" class="btn btn-danger ml-5 m-1  btn-sm" @onclick="@(() => QuitarFiltroAplicaciones())">Quitar Filtro</button>
                    </div>
                }
            if (grupos.Count() > 1)
            {
                 <div  style="display: flex; align-items: baseline;">
                    <div>Filtro </div>
                    @foreach (var grupo in grupos)
                        {
                            <div>
                                <button type="button" class="btn btn-outline-primary m-1 btn-sm" @onclick="@(() => FiltrarAplicaciones(@grupo.PosicionGrupo))">@grupo.PosicionGrupo</button>
                            </div>
                        }
                </div>
            }
       

       
            <table class="table table-striped table-hover table-sm ">
                <thead>
                    <tr>
                        <th>Grupo</th>
                        <th>Posicion</th>
                        <th>SubPosicion</th>
                        <th>Designacion SKF Global</th>
                        <th>*</th>
                        <th>Designacion SKF</th>
                        <th>Imagen</th>
                        <th>Imagen-2</th>
                        <th>Observacion</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var aplicacion in AplicacionesMostrar)
                    {
                    <tr>
                        <td class="align-middle">@aplicacion.PosicionGrupo</td>
                        <td class="align-middle">@aplicacion.Posicion</td>
                        <td class="align-middle">@aplicacion.SubPosicion</td>
                        <td class="align-middle">@aplicacion.DesignacionSkfGlobal</td>
                        <td class="align-middle">
                            <a class="nav-link" href="/ArticuloVista/@aplicacion.DesignacionSkfGlobal">
                                <span class="oi oi-volume-high" aria-hidden="true">Go</span>
                            </a>
                        </td>
                        <td class="align-middle">@aplicacion.DesignacionSKF</td>
                        <td class="align-middle">
                            <img src="Images/Products/@aplicacion.NombreImagen" alt="imgen"  width=100 height=100 />
                        </td>
                        <td class="align-middle">
                            <img src="Images/Products/@aplicacion.NombreImagen2" alt="imgen"  width=100 height=100 />
                        </td>
                        <td class="align-middle">@aplicacion.Observacion</td>
                    </tr>
                    }
                </tbody>
            </table>
       

        }
    
    }



@code {

    private List<AplicacionesModelo> grupos = new List<AplicacionesModelo>();

    private List<SegmentoVehiculo> Segmentos = new List<SegmentoVehiculo>();
    private string idSegmento = "0";

    private List<MarcaVehiculo> MarcasVehiculos = new List<MarcaVehiculo>();
    private int idMarca = 0;

    private List<ModeloVehiculo> ModelosVehiculos = new List<ModeloVehiculo>();
    private int idModelo = 0;

    private List<VersionModelo> VersionesModelo = new List<VersionModelo>();
    private int idVehiculo = 0;

    private List<AplicacionesModelo> Aplicaciones = new List<AplicacionesModelo>();
    private List<AplicacionesModelo> AplicacionesFiltradas = new List<AplicacionesModelo>();
    private List<AplicacionesModelo> AplicacionesMostrar = new List<AplicacionesModelo>();
    //private int idVehiculo = 0;

    private List<Designaciones> DesignacionesArticulos = new List<Designaciones>();
    private int idDesignacion = 0;

    private string posicionGrupoElejida = string.Empty; 





    protected override async Task OnInitializedAsync()
    {
        Segmentos = await Repositorio.ObtenerSegmentosVehiculos();

        //cargamos el select (actualizando el list MarcasVehiculos) con el valor 0 para que tome todas las marcas
        MarcasVehiculos = await Repositorio.ObtenerMarcaVehiculo(0);


    }

    //se llama al cambiar el segmento
    private async Task SegmentoHasChanged(string idSeg)
    {
        idMarca = 0;
        MarcasVehiculos.Clear();
        idModelo = 0;
        ModelosVehiculos.Clear();
        idVehiculo = 0;
        VersionesModelo.Clear();
        Aplicaciones.Clear();

        //actualizamos idSegmento para que quede en el select
        idSegmento = idSeg;
        //cargamos el select (actualizando el list MarcasVehiculos) con el valor del id del segmento elegido
        int codigoSegmento = Convert.ToInt32(idSeg);
        MarcasVehiculos = await Repositorio.ObtenerMarcaVehiculo(codigoSegmento);
    }

    private async Task MarcaHasChanged(int idMar)
    {
        idModelo = 0;
        ModelosVehiculos.Clear();
        idVehiculo = 0;
        VersionesModelo.Clear();
        Aplicaciones.Clear();

        //actualizamos idMarca para que quede en el select
        idMarca = idMar;
        int codigoSegmento = Convert.ToInt32(idSegmento);
        ModelosVehiculos = await Repositorio.ObtenerModelosVehiculos(codigoSegmento, idMarca);
    }

    private async Task ModeloHasChanged(int idMod)
    {
        idVehiculo = 0;
        VersionesModelo.Clear();
        Aplicaciones.Clear();

        //actualizamos idModelo para que quede en el select
        idModelo = idMod;
        int codigoSegmento = Convert.ToInt32(idSegmento);
        VersionesModelo = await Repositorio.ObtenerVersionesModelo(codigoSegmento, idModelo);
    }

    private void VersionHasChanged(int idVehi)
    {
        idVehiculo = idVehi;
    }

    private async Task TraerAplicaciones()
    {
        AplicacionesMostrar.Clear();
        AplicacionesFiltradas.Clear();
        Aplicaciones = await Repositorio.ObtenerAplicacionesModelo(idVehiculo);
        AplicacionesMostrar = Aplicaciones;

        //traemos los grupos para presentar el filtro al usuario
        grupos = AplicacionesMostrar.GroupBy(x => x.PosicionGrupo)
                                 .Select(PosicionGrupo => PosicionGrupo.First()).ToList();

    }

    private  void FiltrarAplicaciones(string posicionGrupo)
    {
        AplicacionesFiltradas = Aplicaciones.Where(a => a.PosicionGrupo == posicionGrupo).ToList();
        AplicacionesMostrar = AplicacionesFiltradas;
        grupos.Clear();
        posicionGrupoElejida = posicionGrupo;
    }

    private  void QuitarFiltroAplicaciones()
    {
        AplicacionesMostrar = Aplicaciones;
        AplicacionesFiltradas.Clear();
        grupos = AplicacionesMostrar.GroupBy(x => x.PosicionGrupo)
                                 .Select(PosicionGrupo => PosicionGrupo.First()).ToList();
        posicionGrupoElejida = string.Empty;
    }
        
       
 }

